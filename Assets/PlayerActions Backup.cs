//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/PlayerActions Backup.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionsBackup : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionsBackup()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions Backup"",
    ""maps"": [
        {
            ""name"": ""ActorVehicle"",
            ""id"": ""5d22000d-0a69-474a-9001-f88fbfb8bbd2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7c22d521-10a4-4ad5-ac3a-6e982786eca5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""f36848dc-6569-42de-9a1d-20a126070942"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Button"",
                    ""id"": ""4e76911e-e336-47a2-ad22-a2d93a500262"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5307c53-41ea-416a-a5b8-d76faf685b0c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2932f319-d5fb-4c61-b5d8-9f319ac08af0"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f8cf6418-d7a8-44f9-bcc7-6ee745a5864b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c458c5c-da09-4e04-879c-d9e2f73cee3b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59d06f9d-474c-4fb4-a374-1cca531dfd50"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a3ca8ba2-a564-446e-a715-c804349424dd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""405c14b3-46db-495f-b860-ae1cafe81dc5"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4a0c0a70-9d08-42fe-9aaf-0d28f474cc98"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fd5105fc-87a9-4735-9983-416d7678556f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2689f1a-de95-408b-8855-9f4b4b3230f6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a12f4138-caea-4b02-8ff8-6a18b1e022ed"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""db5527ea-13f1-4bc1-9c85-849e40aa6b6d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Agent"",
            ""bindingGroup"": ""Agent"",
            ""devices"": []
        }
    ]
}");
        // ActorVehicle
        m_ActorVehicle = asset.FindActionMap("ActorVehicle", throwIfNotFound: true);
        m_ActorVehicle_Movement = m_ActorVehicle.FindAction("Movement", throwIfNotFound: true);
        m_ActorVehicle_Boost = m_ActorVehicle.FindAction("Boost", throwIfNotFound: true);
        m_ActorVehicle_Handbrake = m_ActorVehicle.FindAction("Handbrake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActorVehicle
    private readonly InputActionMap m_ActorVehicle;
    private IActorVehicleActions m_ActorVehicleActionsCallbackInterface;
    private readonly InputAction m_ActorVehicle_Movement;
    private readonly InputAction m_ActorVehicle_Boost;
    private readonly InputAction m_ActorVehicle_Handbrake;
    public struct ActorVehicleActions
    {
        private @PlayerActionsBackup m_Wrapper;
        public ActorVehicleActions(@PlayerActionsBackup wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_ActorVehicle_Movement;
        public InputAction @Boost => m_Wrapper.m_ActorVehicle_Boost;
        public InputAction @Handbrake => m_Wrapper.m_ActorVehicle_Handbrake;
        public InputActionMap Get() { return m_Wrapper.m_ActorVehicle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActorVehicleActions set) { return set.Get(); }
        public void SetCallbacks(IActorVehicleActions instance)
        {
            if (m_Wrapper.m_ActorVehicleActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnMovement;
                @Boost.started -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnBoost;
                @Handbrake.started -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnHandbrake;
                @Handbrake.performed -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnHandbrake;
                @Handbrake.canceled -= m_Wrapper.m_ActorVehicleActionsCallbackInterface.OnHandbrake;
            }
            m_Wrapper.m_ActorVehicleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @Handbrake.started += instance.OnHandbrake;
                @Handbrake.performed += instance.OnHandbrake;
                @Handbrake.canceled += instance.OnHandbrake;
            }
        }
    }
    public ActorVehicleActions @ActorVehicle => new ActorVehicleActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_AgentSchemeIndex = -1;
    public InputControlScheme AgentScheme
    {
        get
        {
            if (m_AgentSchemeIndex == -1) m_AgentSchemeIndex = asset.FindControlSchemeIndex("Agent");
            return asset.controlSchemes[m_AgentSchemeIndex];
        }
    }
    public interface IActorVehicleActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
    }
}
